<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Access Tokens - Telegram Bot Notifier</title>
    <link rel="stylesheet" href="/css/themes.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-primary);
        }
        
        .header {
            background: var(--bg-secondary);
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            color: #333;
            font-size: 1.5rem;
        }
        
        .nav {
            background: var(--bg-secondary);
            padding: 0 2rem;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .nav ul {
            list-style: none;
            display: flex;
            gap: 0;
        }
        
        .nav li a {
            display: block;
            padding: 1rem 1.5rem;
            text-decoration: none;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }
        
        .nav li a:hover,
        .nav li a.active {
            color: #667eea;
            border-bottom-color: #667eea;
        }
        
        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        
        .card {
            background: var(--bg-secondary);
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .card h2 {
            color: #333;
            margin-bottom: 1rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
            font-weight: 500;
            font-size: 0.9rem;
        }
        
        .form-group input[type="text"],
        .form-group input[type="password"],
        .form-group input[type="email"] {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid var(--border-primary);
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s;
            background: var(--bg-primary);
            color: var(--text-primary);
        }
        
        .form-group input[type="text"]:focus,
        .form-group input[type="password"]:focus,
        .form-group input[type="email"]:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .form-group small {
            display: block;
            margin-top: 0.5rem;
            color: var(--text-secondary);
            font-size: 0.8rem;
        }
        
        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn:hover {
            transform: translateY(-2px);
        }
        
        .btn-danger {
            background: #dc3545;
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
        }
        
        .btn-secondary {
            background: #6c757d;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }
        
        .table th,
        .table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .table th {
            background: var(--bg-secondary);
            font-weight: 600;
            color: #333;
        }
        
        .token-cell {
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            background: var(--bg-secondary);
            padding: 0.5rem;
            border-radius: 3px;
            word-break: break-all;
            max-width: 300px;
        }
        
        .error {
            background: #fee;
            color: #c33;
            padding: 0.8rem;
            border-radius: 5px;
            margin-bottom: 1rem;
            border-left: 4px solid #c33;
        }
        
        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            color: #666;
        }
        
        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }
        
        .copy-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 0.3rem 0.6rem;
            border-radius: 3px;
            cursor: pointer;
            font-size: 0.8rem;
            margin-left: 0.5rem;
        }
        
        .copy-btn:hover {
            background: #218838;
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: var(--bg-secondary);
            margin: 5% auto;
            padding: 0;
            border: none;
            border-radius: 10px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }
        
        .modal-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid var(--border-primary);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-header h3 {
            margin: 0;
            color: var(--text-primary);
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-secondary);
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .modal-body {
            padding: 1.5rem 2rem 2rem 2rem;
            max-height: 70vh;
            overflow-y: auto;
        }
        
        .modal-body p {
            margin: 0 0 1.5rem 0;
            line-height: 1.5;
        }
        
        .modal-footer {
            padding: 1rem 2rem 1.5rem 2rem;
            border-top: 1px solid var(--border-primary);
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
            background: var(--bg-secondary);
            border-radius: 0 0 10px 10px;
        }
        
        .bot-selection {
            margin-top: 1rem;
            border: 1px solid var(--border-primary);
            border-radius: 5px;
            background: var(--bg-primary);
        }
        
        .bot-selection-header {
            padding: 0.75rem 1rem;
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border-primary);
            border-radius: 5px 5px 0 0;
            font-weight: 500;
            font-size: 0.9rem;
            color: var(--text-primary);
        }
        
        .bot-option {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--border-primary);
            transition: background-color 0.2s;
        }
        
        .bot-option:last-child {
            border-bottom: none;
            border-radius: 0 0 5px 5px;
        }
        
        .bot-option:hover {
            background: rgba(102, 126, 234, 0.05);
        }
        
        .bot-option input[type="checkbox"] {
            margin: 0 0.75rem 0 0;
            width: 16px;
            height: 16px;
            cursor: pointer;
        }
        
        .bot-option label {
            margin: 0;
            cursor: pointer;
            flex: 1;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: var(--text-primary);
            font-weight: normal;
            font-size: 0.9rem;
        }
        
        .bot-name {
            font-weight: 500;
        }
        
        .bot-status {
            font-size: 0.8rem;
            color: var(--text-secondary);
            background: rgba(40, 167, 69, 0.1);
            padding: 0.2rem 0.5rem;
            border-radius: 3px;
            border: 1px solid rgba(40, 167, 69, 0.2);
        }
        
        .send-to-all-option {
            background: var(--bg-primary);
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
            border: 2px solid var(--border-primary);
            transition: all 0.2s;
            cursor: pointer;
        }
        
        .send-to-all-option.selected {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }
        
        .send-to-all-option:hover {
            border-color: #667eea;
        }
        
        .send-to-all-checkbox {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .send-to-all-checkbox input[type="checkbox"] {
            margin: 0 0.75rem 0 0;
            width: 16px;
            height: 16px;
            cursor: pointer;
        }
        
        .send-to-all-checkbox label {
            margin: 0;
            cursor: pointer;
            font-weight: 500;
            color: var(--text-primary);
            font-size: 0.95rem;
        }
        
        .assigned-bots {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
        
        .btn-edit {
            background: #007bff;
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
            margin-right: 0.5rem;
        }
        
        .btn-test {
            background: #17a2b8;
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
            margin-right: 0.5rem;
        }
        
        .test-result {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 5px;
            display: none;
        }
        
        .test-result.success {
            background: var(--success-bg, #d4edda);
            color: var(--success-text, #155724);
            border: 1px solid var(--success-border, #c3e6cb);
        }
        
        .test-result.error {
            background: var(--danger-bg, #f8d7da);
            color: var(--danger-text, #721c24);
            border: 1px solid var(--danger-border, #f5c6cb);
        }
        
        /* Dialog Styles */
        .dialog {
            border: none;
            border-radius: 10px;
            padding: 0;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            background: var(--bg-secondary);
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            margin: 0;
        }
        
        .dialog[open] {
            display: flex;
            flex-direction: column;
        }
        
        .dialog::backdrop {
            background: rgba(0,0,0,0.5);
        }
        
        .dialog-header {
            padding: 1.5rem 2rem 1rem 2rem;
            border-bottom: 1px solid var(--border-primary);
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .dialog-icon {
            font-size: 1.5rem;
        }
        
        .dialog-icon.success {
            color: #28a745;
        }
        
        .dialog-icon.error {
            color: #dc3545;
        }
        
        .dialog-icon.info {
            color: #17a2b8;
        }
        
        .dialog-icon.warning {
            color: #ffc107;
        }
        
        .dialog-title {
            margin: 0;
            color: var(--text-primary);
            font-size: 1.2rem;
        }
        
        .dialog-body {
            padding: 1.5rem 2rem;
            color: var(--text-primary);
            line-height: 1.5;
        }
        
        .dialog-message {
            margin-bottom: 1rem;
        }
        
        .dialog-details {
            background: var(--bg-primary);
            padding: 1rem;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            max-height: 200px;
            overflow-y: auto;
            white-space: pre-line;
        }
        
        .dialog-footer {
            padding: 1rem 2rem 1.5rem 2rem;
            border-top: 1px solid var(--border-primary);
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }
        
        .dialog-btn {
            padding: 0.6rem 1.2rem;
            border: none;
            border-radius: 5px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .dialog-btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .dialog-btn-secondary {
            background: #6c757d;
            color: white;
        }
        
        .dialog-btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .dialog-btn:hover {
            transform: translateY(-1px);
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>📱 Telegram Bot Notifier</h1>
        <div class="user-info">
            <!-- Theme Toggle -->
            <div class="theme-toggle" style="margin-right: 1rem;">
                <button class="theme-toggle-btn" id="theme-toggle-btn">
                    <span id="theme-icon">🖥️</span>
                    <span id="theme-text">System</span>
                    <span style="margin-left: 0.3rem;">▼</span>
                </button>
                <div class="theme-dropdown" id="theme-dropdown">
                    <div class="theme-option" data-theme-value="system">
                        <span>🖥️</span>
                        <span>System</span>
                    </div>
                    <div class="theme-option" data-theme-value="light">
                        <span>☀️</span>
                        <span>Light</span>
                    </div>
                    <div class="theme-option" data-theme-value="dark">
                        <span>🌙</span>
                        <span>Dark</span>
                    </div>
                </div>
            </div>
            
            <!-- Admin Dropdown -->
            <div class="admin-dropdown-container">
                <button class="admin-dropdown-btn" id="admin-dropdown-btn">
                    <span>Welcome, <%= username || 'User' %>!</span>
                    <% if (isAdmin) { %>
                        <span class="admin-badge">🔑 Admin</span>
                    <% } %>
                    <span style="margin-left: 0.5rem;">▼</span>
                </button>
                <div class="admin-dropdown" id="admin-dropdown">
                    <a href="/change-password" class="dropdown-item">
                        <span>🔐</span>
                        <span>Change Password</span>
                    </a>
                    <a href="/logout" class="dropdown-item">
                        <span>😪</span>
                        <span>Logout</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
    
    <nav class="nav">
        <ul>
            <li><a href="/dashboard">Dashboard</a></li>
            <li><a href="/tokens" class="active">Access Tokens</a></li>
            <li><a href="/bots">Telegram Bots</a></li>
            <% if (isAdmin) { %>
                <li><a href="/users">Users</a></li>
            <% } %>
        </ul>
    </nav>
    
    <div class="container">
        <div class="page-header">
            <h2>🔑 Access Tokens</h2>
            <button class="add-btn" data-modal="add-token-modal">
                <span>+</span>
                <span>New Token</span>
            </button>
        </div>
        
        <div class="card">
            
            <% if (error) { %>
                <div class="error"><%= error %></div>
            <% } %>
            
            <% if (tokens.length === 0) { %>
                <div class="empty-state">
                    <div class="empty-state-icon">🔑</div>
                    <h3>No Access Tokens</h3>
                    <p>You haven't created any access tokens yet. Create one above to start using the API.</p>
                </div>
            <% } else { %>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Token</th>
                            <th>Assigned Bots</th>
                            <th>Created</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% tokens.forEach(token => { %>
                            <tr>
                                <td><%= token.name %></td>
                                <td>
                                    <div class="token-cell">
                                        <span id="token-<%= token.id %>"><%= token.token %></span>
                                        <button class="copy-btn" onclick="copyToken('<%= token.id %>')">Copy</button>
                                    </div>
                                </td>
                                <td>
                                    <% if (token.send_to_all) { %>
                                        <span style="color: #667eea; font-weight: bold;">📡 All Bots</span>
                                    <% } else if (token.assignedBots && token.assignedBots.length > 0) { %>
                                        <div class="assigned-bots">
                                            <% token.assignedBots.forEach((bot, index) => { %>
                                                <span><%= bot.bot_name || `Bot ${bot.id}` %><%= index < token.assignedBots.length - 1 ? ', ' : '' %></span>
                                            <% }) %>
                                        </div>
                                    <% } else { %>
                                        <span style="color: #dc3545;">⚠️ No bots assigned</span>
                                    <% } %>
                                </td>
                                <td><%= new Date(token.created_at).toLocaleDateString() %></td>
                                <td>
                                    <% if (token.is_active) { %>
                                        <span style="color: #28a745; font-weight: bold;">●</span> Active
                                    <% } else { %>
                                        <span style="color: #dc3545; font-weight: bold;">●</span> Inactive
                                    <% } %>
                                </td>
                                <td>
                                    <button class="btn btn-edit" onclick="editToken('<%= token.id %>')">Edit</button>
                                    <button class="btn btn-test" onclick="testToken('<%= token.id %>', '<%= token.name %>')">Test</button>
                                    <button class="btn btn-danger" onclick="confirmDeleteToken('<%= token.id %>', '<%= token.name %>')">Delete</button>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% } %>
        </div>
        
        <% if (tokens.length > 0) { %>
        <div class="card">
            <h3>📡 Using Your Access Tokens</h3>
            <p>Use your access tokens to send messages via the API:</p>
            
            <div style="background: var(--bg-secondary); padding: 1rem; border-radius: 5px; margin: 1rem 0; font-family: 'Courier New', monospace; overflow-x: auto;">
curl -X POST http://localhost:3000/api/send \<br>
&nbsp;&nbsp;-H "Authorization: Bearer YOUR_TOKEN_HERE" \<br>
&nbsp;&nbsp;-H "Content-Type: application/json" \<br>
&nbsp;&nbsp;-d '{"message": "Hello from webhook!"}'
            </div>
            
            <p><strong>Note:</strong> Make sure you have configured at least one Telegram bot before sending messages.</p>
        </div>
        <% } %>
    </div>
    
    <script>
        function copyToken(tokenId) {
            const tokenElement = document.getElementById('token-' + tokenId);
            const token = tokenElement.textContent;
            
            navigator.clipboard.writeText(token).then(() => {
                const btn = tokenElement.nextElementSibling;
                const originalText = btn.textContent;
                btn.textContent = 'Copied!';
                btn.style.background = '#28a745';
                
                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.style.background = '';
                }, 2000);
            }).catch(() => {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = token;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                
                const btn = tokenElement.nextElementSibling;
                const originalText = btn.textContent;
                btn.textContent = 'Copied!';
                
                setTimeout(() => {
                    btn.textContent = originalText;
                }, 2000);
            });
        }
    </script>
    
    <!-- Add Token Modal -->
    <div class="modal" id="add-token-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>🔑 Create New Access Token</h3>
                <button class="modal-close" type="button">&times;</button>
            </div>
            <form method="POST" action="/tokens">
                <div class="modal-body">
                    <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">Access tokens are used to authenticate API requests to send messages through your Telegram bots.</p>
                    
                    <div class="form-group">
                        <label for="modal-name">Token Name</label>
                        <input type="text" id="modal-name" name="name" required placeholder="e.g., My App Token">
                        <small style="color: var(--text-muted);">Give your token a memorable name to identify its purpose</small>
                    </div>
                    
                    <div class="form-group">
                        <label>Bot Assignment</label>
                        
                        <!-- Send to All Option -->
                        <div class="send-to-all-option" id="send-to-all-option">
                            <div class="send-to-all-checkbox">
                                <input type="checkbox" id="send-to-all" name="sendToAll" onchange="toggleSendToAll()">
                                <label for="send-to-all">📡 Send to All Bots</label>
                            </div>
                            <small>Automatically send to all current and future bots</small>
                        </div>
                        
                        <!-- Individual Bot Selection -->
                        <div class="bot-selection" id="bot-selection">
                            <% if (bots.length === 0) { %>
                                <div style="padding: 1rem; text-align: center; color: var(--text-secondary); font-style: italic;">No bots available. Please create a bot first.</div>
                            <% } else { %>
                                <div class="bot-selection-header">Or select specific bots:</div>
                                <% bots.forEach(bot => { %>
                                    <div class="bot-option">
                                        <input type="checkbox" id="bot-<%= bot.id %>" name="botIds" value="<%= bot.id %>">
                                        <label for="bot-<%= bot.id %>">
                                            <span class="bot-name"><%= bot.bot_name || `Bot ${bot.id}` %></span>
                                            <span class="bot-status">Active</span>
                                        </label>
                                    </div>
                                <% }) %>
                            <% } %>
                        </div>
                    </div>
                    
                    <div class="test-result" id="add-test-result"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary modal-cancel">Cancel</button>
                    <button type="button" class="btn btn-test" onclick="testTokenSettings('add')">Test</button>
                    <button type="submit" class="btn">Create Token</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Edit Token Modal -->
    <div class="modal" id="edit-token-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>✏️ Edit Access Token</h3>
                <button class="modal-close" type="button">&times;</button>
            </div>
            <form id="edit-token-form">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="edit-modal-name">Token Name</label>
                        <input type="text" id="edit-modal-name" name="name" required placeholder="e.g., My App Token">
                    </div>
                    
                    <div class="form-group">
                        <label>Bot Assignment</label>
                        
                        <!-- Send to All Option -->
                        <div class="send-to-all-option" id="edit-send-to-all-option">
                            <div class="send-to-all-checkbox">
                                <input type="checkbox" id="edit-send-to-all" name="sendToAll" onchange="toggleEditSendToAll()">
                                <label for="edit-send-to-all">📡 Send to All Bots</label>
                            </div>
                            <small>Automatically send to all current and future bots</small>
                        </div>
                        
                        <!-- Individual Bot Selection -->
                        <div class="bot-selection" id="edit-bot-selection">
                            <% if (bots.length === 0) { %>
                                <div style="padding: 1rem; text-align: center; color: var(--text-secondary); font-style: italic;">No bots available. Please create a bot first.</div>
                            <% } else { %>
                                <div class="bot-selection-header">Or select specific bots:</div>
                                <% bots.forEach(bot => { %>
                                    <div class="bot-option">
                                        <input type="checkbox" id="edit-bot-<%= bot.id %>" name="botIds" value="<%= bot.id %>">
                                        <label for="edit-bot-<%= bot.id %>">
                                            <span class="bot-name"><%= bot.bot_name || `Bot ${bot.id}` %></span>
                                            <span class="bot-status">Active</span>
                                        </label>
                                    </div>
                                <% }) %>
                            <% } %>
                        </div>
                    </div>
                    
                    <div class="test-result" id="edit-test-result"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary modal-cancel">Cancel</button>
                    <button type="button" class="btn btn-test" onclick="testTokenSettings('edit')">Test</button>
                    <button type="button" class="btn" onclick="saveTokenChanges()">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- HTML Dialogs -->
    <!-- Success Dialog -->
    <dialog class="dialog" id="success-dialog">
        <div class="dialog-header">
            <div class="dialog-icon success">✅</div>
            <h3 class="dialog-title">Success</h3>
        </div>
        <div class="dialog-body">
            <div class="dialog-message" id="success-message"></div>
            <div class="dialog-details" id="success-details" style="display: none;"></div>
        </div>
        <div class="dialog-footer">
            <button class="dialog-btn dialog-btn-primary" onclick="closeDialog('success-dialog')">OK</button>
        </div>
    </dialog>
    
    <!-- Error Dialog -->
    <dialog class="dialog" id="error-dialog">
        <div class="dialog-header">
            <div class="dialog-icon error">❌</div>
            <h3 class="dialog-title">Error</h3>
        </div>
        <div class="dialog-body">
            <div class="dialog-message" id="error-message"></div>
            <div class="dialog-details" id="error-details" style="display: none;"></div>
        </div>
        <div class="dialog-footer">
            <button class="dialog-btn dialog-btn-primary" onclick="closeDialog('error-dialog')">OK</button>
        </div>
    </dialog>
    
    <!-- Confirmation Dialog -->
    <dialog class="dialog" id="confirm-dialog">
        <div class="dialog-header">
            <div class="dialog-icon warning">⚠️</div>
            <h3 class="dialog-title">Confirmation</h3>
        </div>
        <div class="dialog-body">
            <div class="dialog-message" id="confirm-message"></div>
        </div>
        <div class="dialog-footer">
            <button class="dialog-btn dialog-btn-secondary" onclick="closeDialog('confirm-dialog')">Cancel</button>
            <button class="dialog-btn dialog-btn-danger" id="confirm-ok-btn">Confirm</button>
        </div>
    </dialog>
    
    <!-- Info Dialog -->
    <dialog class="dialog" id="info-dialog">
        <div class="dialog-header">
            <div class="dialog-icon info">ℹ️</div>
            <h3 class="dialog-title">Information</h3>
        </div>
        <div class="dialog-body">
            <div class="dialog-message" id="info-message"></div>
            <div class="dialog-details" id="info-details" style="display: none;"></div>
        </div>
        <div class="dialog-footer">
            <button class="dialog-btn dialog-btn-primary" onclick="closeDialog('info-dialog')">OK</button>
        </div>
    </dialog>
    
    <script>
        let currentEditTokenId = null;
        
        // Dialog utility functions
        function showSuccessDialog(message, details = null) {
            document.getElementById('success-message').textContent = message;
            const detailsEl = document.getElementById('success-details');
            if (details) {
                detailsEl.textContent = details;
                detailsEl.style.display = 'block';
            } else {
                detailsEl.style.display = 'none';
            }
            document.getElementById('success-dialog').showModal();
        }
        
        function showErrorDialog(message, details = null) {
            document.getElementById('error-message').textContent = message;
            const detailsEl = document.getElementById('error-details');
            if (details) {
                detailsEl.textContent = details;
                detailsEl.style.display = 'block';
            } else {
                detailsEl.style.display = 'none';
            }
            document.getElementById('error-dialog').showModal();
        }
        
        function showConfirmDialog(message, onConfirm) {
            document.getElementById('confirm-message').textContent = message;
            const confirmBtn = document.getElementById('confirm-ok-btn');
            
            // Remove any existing event listeners
            confirmBtn.replaceWith(confirmBtn.cloneNode(true));
            const newConfirmBtn = document.getElementById('confirm-ok-btn');
            
            newConfirmBtn.addEventListener('click', function() {
                closeDialog('confirm-dialog');
                onConfirm();
            });
            
            document.getElementById('confirm-dialog').showModal();
        }
        
        function showInfoDialog(message, details = null) {
            document.getElementById('info-message').textContent = message;
            const detailsEl = document.getElementById('info-details');
            if (details) {
                detailsEl.textContent = details;
                detailsEl.style.display = 'block';
            } else {
                detailsEl.style.display = 'none';
            }
            document.getElementById('info-dialog').showModal();
        }
        
        function closeDialog(dialogId) {
            document.getElementById(dialogId).close();
        }
        
        // Modal functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Add modal button functionality
            const addBtn = document.querySelector('.add-btn');
            if (addBtn) {
                addBtn.addEventListener('click', function() {
                    openModal('add-token-modal');
                });
            }
            
            // Close modal functionality
            document.querySelectorAll('.modal-close, .modal-cancel').forEach(btn => {
                btn.addEventListener('click', function() {
                    closeModals();
                });
            });
            
            // Close modal when clicking outside
            document.querySelectorAll('.modal').forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeModals();
                    }
                });
            });
        });
        
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
        }
        
        function closeModals() {
            document.querySelectorAll('.modal').forEach(modal => {
                modal.style.display = 'none';
            });
            // Reset forms
            document.querySelectorAll('.test-result').forEach(result => {
                result.style.display = 'none';
            });
        }
        
        // Bot selection toggle functionality
        function toggleSendToAll() {
            const sendToAllCheckbox = document.getElementById('send-to-all');
            const sendToAllOption = document.getElementById('send-to-all-option');
            const botSelection = document.getElementById('bot-selection');
            const botCheckboxes = document.querySelectorAll('#bot-selection input[type="checkbox"]');
            
            if (sendToAllCheckbox.checked) {
                sendToAllOption.classList.add('selected');
                botSelection.style.opacity = '0.5';
                botCheckboxes.forEach(cb => {
                    cb.disabled = true;
                    cb.checked = false;
                });
            } else {
                sendToAllOption.classList.remove('selected');
                botSelection.style.opacity = '1';
                botCheckboxes.forEach(cb => {
                    cb.disabled = false;
                });
            }
        }
        
        function toggleEditSendToAll() {
            const sendToAllCheckbox = document.getElementById('edit-send-to-all');
            const sendToAllOption = document.getElementById('edit-send-to-all-option');
            const botSelection = document.getElementById('edit-bot-selection');
            const botCheckboxes = document.querySelectorAll('#edit-bot-selection input[type="checkbox"]');
            
            if (sendToAllCheckbox.checked) {
                sendToAllOption.classList.add('selected');
                botSelection.style.opacity = '0.5';
                botCheckboxes.forEach(cb => {
                    cb.disabled = true;
                    cb.checked = false;
                });
            } else {
                sendToAllOption.classList.remove('selected');
                botSelection.style.opacity = '1';
                botCheckboxes.forEach(cb => {
                    cb.disabled = false;
                });
            }
        }
        
        // Edit token functionality
        async function editToken(tokenId) {
            currentEditTokenId = tokenId;
            
            try {
                const response = await fetch(`/tokens/${tokenId}/edit`);
                const token = await response.json();
                
                if (response.ok) {
                    // Populate the form
                    document.getElementById('edit-modal-name').value = token.name;
                    document.getElementById('edit-send-to-all').checked = token.send_to_all;
                    
                    // Clear previous selections
                    document.querySelectorAll('#edit-bot-selection input[type="checkbox"]').forEach(cb => {
                        cb.checked = false;
                    });
                    
                    // Set assigned bots
                    if (token.assignedBotIds) {
                        token.assignedBotIds.forEach(botId => {
                            const checkbox = document.getElementById(`edit-bot-${botId}`);
                            if (checkbox) {
                                checkbox.checked = true;
                            }
                        });
                    }
                    
                    // Update UI based on send_to_all
                    toggleEditSendToAll();
                    
                    openModal('edit-token-modal');
                } else {
                    showErrorDialog('Error loading token data');
                }
            } catch (error) {
                showErrorDialog('Error loading token data');
            }
        }
        
        // Save token changes
        async function saveTokenChanges() {
            if (!currentEditTokenId) return;
            
            const form = document.getElementById('edit-token-form');
            const formData = new FormData(form);
            
            try {
                const response = await fetch(`/tokens/${currentEditTokenId}/edit`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: formData.get('name'),
                        sendToAll: formData.get('sendToAll') === 'on',
                        botIds: formData.getAll('botIds')
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    closeModals();
                    location.reload();
                } else {
                    showErrorDialog('Error updating token', result.error);
                }
            } catch (error) {
                showErrorDialog('Error updating token');
            }
        }
        
        // Test token functionality
        async function testToken(tokenId, tokenName) {
            try {
                const response = await fetch(`/tokens/${tokenId}/test`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    const details = `${result.message}\n\nResults:\n${result.results.map(r => `• ${r.botName}: ${r.success ? 'Success' : 'Failed - ' + r.error}`).join('\n')}`;
                    showSuccessDialog('Test successful!', details);
                } else {
                    showErrorDialog('Test failed', result.error);
                }
            } catch (error) {
                showErrorDialog('Error testing token');
            }
        }
        
        // Test token settings in modal
        async function testTokenSettings(modalType) {
            const isEdit = modalType === 'edit';
            const prefix = isEdit ? 'edit-' : '';
            const resultId = isEdit ? 'edit-test-result' : 'add-test-result';
            
            const sendToAllCheckbox = document.getElementById(`${prefix}send-to-all`);
            const botCheckboxes = document.querySelectorAll(`#${prefix}bot-selection input[type="checkbox"]:checked`);
            
            if (!sendToAllCheckbox.checked && botCheckboxes.length === 0) {
                showTestResult(resultId, false, 'Please select at least one bot or enable "Send to All Bots"');
                return;
            }
            
            showTestResult(resultId, true, 'Test feature will be available after creating/updating the token.');
        }
        
        function showTestResult(resultId, success, message) {
            const resultDiv = document.getElementById(resultId);
            resultDiv.className = `test-result ${success ? 'success' : 'error'}`;
            resultDiv.textContent = message;
            resultDiv.style.display = 'block';
            
            // Hide after 5 seconds
            setTimeout(() => {
                resultDiv.style.display = 'none';
            }, 5000);
        }
        
        // Delete confirmation
        function confirmDeleteToken(tokenId, tokenName) {
            showConfirmDialog(
                `Are you sure you want to delete the token "${tokenName}"? This action cannot be undone.`,
                function() {
                    // Create and submit a form to delete the token
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = `/tokens/${tokenId}/delete`;
                    document.body.appendChild(form);
                    form.submit();
                }
            );
        }
    </script>
    
    <script src="/js/theme-manager.js"></script>
</body>
</html>
