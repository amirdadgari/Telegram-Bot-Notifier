<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Telegram Bots - Telegram Bot Notifier</title>
    <link rel="stylesheet" href="/css/themes.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-primary);
        }
        
        .header {
            background: var(--bg-secondary);
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            color: #333;
            font-size: 1.5rem;
        }
        
        .nav {
            background: var(--bg-secondary);
            padding: 0 2rem;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .nav ul {
            list-style: none;
            display: flex;
            gap: 0;
        }
        
        .nav li a {
            display: block;
            padding: 1rem 1.5rem;
            text-decoration: none;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }
        
        .nav li a:hover,
        .nav li a.active {
            color: #667eea;
            border-bottom-color: #667eea;
        }
        
        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        
        .card {
            background: var(--bg-secondary);
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .card h2 {
            color: #333;
            margin-bottom: 1rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
            font-weight: 500;
            font-size: 0.9rem;
        }
        
        .form-group input[type="text"],
        .form-group input[type="password"],
        .form-group input[type="email"],
        .form-group textarea {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid var(--border-primary);
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s;
            background: var(--bg-primary);
            color: var(--text-primary);
            font-family: inherit;
        }
        
        .form-group input[type="text"]:focus,
        .form-group input[type="password"]:focus,
        .form-group input[type="email"]:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .form-group small {
            display: block;
            margin-top: 0.5rem;
            color: var(--text-secondary);
            font-size: 0.8rem;
        }
        
        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn:hover {
            transform: translateY(-2px);
        }
        
        .btn-danger {
            background: #dc3545;
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
        }
        
        .btn-secondary {
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
            background: #6c757d;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }
        
        .table th,
        .table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .table th {
            background: var(--bg-secondary);
            font-weight: 600;
            color: #333;
        }
        
        .error {
            background: #fee;
            color: #c33;
            padding: 0.8rem;
            border-radius: 5px;
            margin-bottom: 1rem;
            border-left: 4px solid #c33;
        }
        
        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            color: #666;
        }
        
        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }
        
        .help-section {
            background: #e7f3ff;
            padding: 1.5rem;
            border-radius: 8px;
            border-left: 4px solid #007bff;
            margin-bottom: 2rem;
        }
        
        .help-section h3 {
            color: #004085;
            margin-bottom: 1rem;
        }
        
        .help-section ol {
            margin-left: 1.5rem;
        }
        
        .help-section li {
            margin-bottom: 0.5rem;
        }
        
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            animation: fadeIn 0.3s;
        }
        
        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background: var(--bg-secondary);
            margin: auto;
            padding: 0;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideIn 0.3s;
        }
        
        .modal-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid var(--border-primary);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-header h3 {
            margin: 0;
            color: #333;
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .modal-close:hover {
            color: #333;
        }
        
        .modal-body {
            padding: 2rem;
        }
        
        .modal-footer {
            padding: 1.5rem 2rem;
            border-top: 1px solid var(--border-primary);
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideIn {
            from { transform: translateY(-50px) scale(0.9); }
            to { transform: translateY(0) scale(1); }
        }
        
        .btn-test {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border: none;
            padding: 0.6rem 1rem;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .btn-test:hover {
            transform: translateY(-1px);
        }
        
        .btn-test:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
        }
        
        .test-result {
            margin-top: 1rem;
            padding: 0.8rem;
            border-radius: 5px;
            font-size: 0.9rem;
        }
        
        .test-result.success {
            background: var(--success-bg, rgba(40, 167, 69, 0.1));
            color: var(--success-text, #28a745);
            border: 1px solid var(--success-border, rgba(40, 167, 69, 0.3));
        }
        
        .test-result.error {
            background: var(--danger-bg, rgba(220, 53, 69, 0.1));
            color: var(--danger-text, #dc3545);
            border: 1px solid var(--danger-border, rgba(220, 53, 69, 0.3));
        }
        
        /* Scheduling Styles */
        .schedule-section {
            margin-top: 1.5rem;
            padding-top: 1rem;
        }
        
        .schedule-option {
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: var(--bg-primary);
            border: 1px solid var(--border-primary);
            border-radius: 8px;
        }
        
        .schedule-header {
            margin-bottom: 1rem;
        }
        
        .schedule-checkbox {
            display: flex;
            align-items: center;
            cursor: pointer;
            margin-bottom: 0.5rem;
        }
        
        .schedule-checkbox input[type="checkbox"] {
            margin-right: 0.75rem;
            transform: scale(1.2);
            cursor: pointer;
        }
        
        .label-text {
            font-weight: 600;
            color: var(--text-primary);
            margin-right: 0.5rem;
        }
        
        .time-range {
            padding-left: 1.5rem;
            border-left: 3px solid var(--border-primary);
            margin-left: 1rem;
        }
        
        .time-inputs {
            display: flex;
            gap: 1rem;
            margin-top: 0.75rem;
        }
        
        .time-input {
            flex: 1;
        }
        
        .time-input label {
            display: block;
            margin-bottom: 0.25rem;
            font-size: 0.85rem;
            color: var(--text-secondary);
            font-weight: 500;
        }
        
        .time-input input[type="time"] {
            width: 100%;
            padding: 0.6rem;
            border: 1px solid var(--border-primary);
            border-radius: 4px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-family: inherit;
            font-size: 0.9rem;
        }
        
        .time-input input[type="time"]:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>📱 Telegram Bot Notifier</h1>
        <div class="user-info">
            <!-- Theme Toggle -->
            <div class="theme-toggle" style="margin-right: 1rem;">
                <button class="theme-toggle-btn" id="theme-toggle-btn">
                    <span id="theme-icon">🖥️</span>
                    <span id="theme-text">System</span>
                    <span style="margin-left: 0.3rem;">▼</span>
                </button>
                <div class="theme-dropdown" id="theme-dropdown">
                    <div class="theme-option" data-theme-value="system">
                        <span>🖥️</span>
                        <span>System</span>
                    </div>
                    <div class="theme-option" data-theme-value="light">
                        <span>☀️</span>
                        <span>Light</span>
                    </div>
                    <div class="theme-option" data-theme-value="dark">
                        <span>🌙</span>
                        <span>Dark</span>
                    </div>
                </div>
            </div>
            
            <!-- Admin Dropdown -->
            <div class="admin-dropdown-container">
                <button class="admin-dropdown-btn" id="admin-dropdown-btn">
                    <span>Welcome, <%= username || 'User' %>!</span>
                    <% if (isAdmin) { %>
                        <span class="admin-badge">🔑 Admin</span>
                    <% } %>
                    <span style="margin-left: 0.5rem;">▼</span>
                </button>
                <div class="admin-dropdown" id="admin-dropdown">
                    <a href="/change-password" class="dropdown-item">
                        <span>🔐</span>
                        <span>Change Password</span>
                    </a>
                    <a href="/logout" class="dropdown-item">
                        <span>😪</span>
                        <span>Logout</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
    
    <nav class="nav">
        <ul>
            <li><a href="/dashboard">Dashboard</a></li>
            <li><a href="/tokens">Access Tokens</a></li>
            <li><a href="/bots" class="active">Telegram Bots</a></li>
            <% if (isAdmin) { %>
                <li><a href="/users">Users</a></li>
            <% } %>
        </ul>
    </nav>
    
    <div class="container">
        <div class="help-section">
            <h3>🤖 How to Set Up a Telegram Bot</h3>
            <ol>
                <li>Open Telegram and search for <strong>@BotFather</strong></li>
                <li>Start a chat with BotFather and send <code>/newbot</code></li>
                <li>Follow the instructions to create your bot and get the <strong>Bot Token</strong></li>
                <li>Create a group/channel or use an existing chat where you want to receive messages</li>
                <li>Add your bot to the chat and make it an admin (for groups/channels)</li>
                <li>Get the <strong>Chat ID</strong>:
                    <ul>
                        <li>Send a message to your bot or in the chat</li>
                        <li>Visit: <code>https://api.telegram.org/bot[BOT_TOKEN]/getUpdates</code></li>
                        <li>Look for the "chat":{"id": value in the response</li>
                    </ul>
                </li>
                <li>Enter both Bot Token and Chat ID in the form below</li>
            </ol>
        </div>
        
        <div class="page-header">
            <h2>🤖 Telegram Bots</h2>
            <button class="add-btn" data-modal="add-bot-modal">
                <span>+</span>
                <span>New Bot</span>
            </button>
        </div>
        
        <div class="card">
            
            <% if (error) { %>
                <div class="error"><%= error %></div>
            <% } %>
            
            <% if (bots.length === 0) { %>
                <div class="empty-state">
                    <div class="empty-state-icon">🤖</div>
                    <h3>No Telegram Bots</h3>
                    <p>You haven't configured any Telegram bots yet. Add one above to start receiving messages.</p>
                </div>
            <% } else { %>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Bot Name</th>
                            <th>Silent Time</th>
                            <th>Pause Time</th>
                            <th>Created</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% bots.forEach(bot => { %>
                            <tr>
                                <td><%= bot.bot_name || 'Unnamed Bot' %></td>
                                <td>
                                    <% if (bot.silent_enabled) { %>
                                        <span style="color: #f39c12; font-size: 0.9rem;">🔇 <%= bot.silent_start_time %> - <%= bot.silent_end_time %></span>
                                    <% } else { %>
                                        <span style="color: var(--text-secondary); font-size: 0.9rem;">Disabled</span>
                                    <% } %>
                                </td>
                                <td>
                                    <% if (bot.paused_enabled) { %>
                                        <span style="color: #e74c3c; font-size: 0.9rem;">⏸️ <%= bot.paused_start_time %> - <%= bot.paused_end_time %></span>
                                    <% } else { %>
                                        <span style="color: var(--text-secondary); font-size: 0.9rem;">Disabled</span>
                                    <% } %>
                                </td>
                                <td><%= new Date(bot.created_at).toLocaleDateString() %></td>
                                <td>
                                    <% if (bot.is_active) { %>
                                        <span style="color: #28a745; font-weight: bold;">●</span> Active
                                    <% } else { %>
                                        <span style="color: #dc3545; font-weight: bold;">●</span> Inactive
                                    <% } %>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-secondary" onclick="editBot(<%= bot.id %>)" style="margin-right: 0.5rem;">Edit</button>
                                    <form method="POST" action="/bots/<%= bot.id %>/delete" style="display: inline;" onsubmit="return confirm('Are you sure you want to delete this bot configuration?')">
                                        <button type="submit" class="btn btn-danger">Delete</button>
                                    </form>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% } %>
        </div>
        
        <% if (bots.length > 0) { %>
        <div class="card">
            <h3>🧪 Test Your Bot Configuration</h3>
            <p>Once you've created access tokens and configured bots, you can test the system:</p>
            
            <div style="background: var(--bg-secondary); padding: 1rem; border-radius: 5px; margin: 1rem 0; font-family: 'Courier New', monospace; overflow-x: auto;">
curl -X POST http://localhost:3000/api/send \
&nbsp;&nbsp;-H "Authorization: Bearer YOUR_ACCESS_TOKEN" \
&nbsp;&nbsp;-H "Content-Type: application/json" \
&nbsp;&nbsp;-d '{"message": "🚀 Test message from webhook!"}'
            </div>
            
            <p><strong>Note:</strong> Make sure you have created an access token on the Tokens page first.</p>
        </div>
        <% } %>
    </div>
    
    <!-- Add Bot Modal -->
    <div class="modal" id="add-bot-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>🤖 Add New Telegram Bot</h3>
                <button class="modal-close" type="button">&times;</button>
            </div>
            <form method="POST" action="/bots" id="add-bot-form">
                <div class="modal-body">
                    <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">Configure a Telegram bot to receive webhook messages.</p>
                    
                    <div class="form-group">
                        <label for="add-bot_name">Bot Name</label>
                        <input type="text" id="add-bot_name" name="bot_name" required placeholder="e.g., My Notification Bot">
                        <small style="color: var(--text-muted);">A friendly name to identify this bot</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="add-bot_token">Bot Token</label>
                        <input type="text" id="add-bot_token" name="bot_token" required placeholder="e.g., 123456789:ABCdefGhIJKlmNOpqrsTUVwxyZ">
                        <small style="color: var(--text-muted);">Get this from @BotFather on Telegram</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="add-chat_id">Chat ID</label>
                        <input type="text" id="add-chat_id" name="chat_id" required placeholder="e.g., -1001234567890 or 123456789">
                        <small style="color: var(--text-muted);">The chat/channel/group ID where messages will be sent</small>
                    </div>
                    
                    <!-- Scheduling Options -->
                    <div class="schedule-section">
                        <h4 style="margin: 1.5rem 0 1rem 0; color: var(--text-primary); border-bottom: 1px solid var(--border-primary); padding-bottom: 0.5rem;">📅 Scheduling Options</h4>
                        
                        <!-- Silent Mode -->
                        <div class="schedule-option">
                            <div class="schedule-header">
                                <label class="schedule-checkbox">
                                    <input type="checkbox" id="add-silent_enabled" name="silent_enabled">
                                    <span class="checkmark"></span>
                                    <span class="label-text">🔇 Silent Mode</span>
                                </label>
                                <small style="color: var(--text-muted);">Send messages without notification sound during specified hours</small>
                            </div>
                            <div class="time-range" id="add-silent-range" style="display: none;">
                                <div class="time-inputs">
                                    <div class="time-input">
                                        <label for="add-silent_start_time">From:</label>
                                        <input type="time" id="add-silent_start_time" name="silent_start_time">
                                    </div>
                                    <div class="time-input">
                                        <label for="add-silent_end_time">To:</label>
                                        <input type="time" id="add-silent_end_time" name="silent_end_time">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Paused Mode -->
                        <div class="schedule-option">
                            <div class="schedule-header">
                                <label class="schedule-checkbox">
                                    <input type="checkbox" id="add-paused_enabled" name="paused_enabled">
                                    <span class="checkmark"></span>
                                    <span class="label-text">⏸️ Paused Mode</span>
                                </label>
                                <small style="color: var(--text-muted);">Do not send any messages during specified hours</small>
                            </div>
                            <div class="time-range" id="add-paused-range" style="display: none;">
                                <div class="time-inputs">
                                    <div class="time-input">
                                        <label for="add-paused_start_time">From:</label>
                                        <input type="time" id="add-paused_start_time" name="paused_start_time">
                                    </div>
                                    <div class="time-input">
                                        <label for="add-paused_end_time">To:</label>
                                        <input type="time" id="add-paused_end_time" name="paused_end_time">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div id="add-test-result"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-test" id="add-test-btn">🧪 Test Bot</button>
                    <button type="button" class="btn btn-secondary modal-cancel">Cancel</button>
                    <button type="submit" class="btn">Add Bot</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Edit Bot Modal -->
    <div class="modal" id="edit-bot-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>🛠️ Edit Telegram Bot</h3>
                <button class="modal-close" type="button">&times;</button>
            </div>
            <form method="POST" id="edit-bot-form">
                <div class="modal-body">
                    <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">Update your Telegram bot configuration.</p>
                    
                    <div class="form-group">
                        <label for="edit-bot_name">Bot Name</label>
                        <input type="text" id="edit-bot_name" name="bot_name" required placeholder="e.g., My Notification Bot">
                        <small style="color: var(--text-muted);">A friendly name to identify this bot</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-bot_token">Bot Token</label>
                        <input type="text" id="edit-bot_token" name="bot_token" required placeholder="e.g., 123456789:ABCdefGhIJKlmNOpqrsTUVwxyZ">
                        <small style="color: var(--text-muted);">Get this from @BotFather on Telegram</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-chat_id">Chat ID</label>
                        <input type="text" id="edit-chat_id" name="chat_id" required placeholder="e.g., -1001234567890 or 123456789">
                        <small style="color: var(--text-muted);">The chat/channel/group ID where messages will be sent</small>
                    </div>
                    
                    <!-- Scheduling Options -->
                    <div class="schedule-section">
                        <h4 style="margin: 1.5rem 0 1rem 0; color: var(--text-primary); border-bottom: 1px solid var(--border-primary); padding-bottom: 0.5rem;">📅 Scheduling Options</h4>
                        
                        <!-- Silent Mode -->
                        <div class="schedule-option">
                            <div class="schedule-header">
                                <label class="schedule-checkbox">
                                    <input type="checkbox" id="edit-silent_enabled" name="silent_enabled">
                                    <span class="checkmark"></span>
                                    <span class="label-text">🔇 Silent Mode</span>
                                </label>
                                <small style="color: var(--text-muted);">Send messages without notification sound during specified hours</small>
                            </div>
                            <div class="time-range" id="edit-silent-range" style="display: none;">
                                <div class="time-inputs">
                                    <div class="time-input">
                                        <label for="edit-silent_start_time">From:</label>
                                        <input type="time" id="edit-silent_start_time" name="silent_start_time">
                                    </div>
                                    <div class="time-input">
                                        <label for="edit-silent_end_time">To:</label>
                                        <input type="time" id="edit-silent_end_time" name="silent_end_time">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Paused Mode -->
                        <div class="schedule-option">
                            <div class="schedule-header">
                                <label class="schedule-checkbox">
                                    <input type="checkbox" id="edit-paused_enabled" name="paused_enabled">
                                    <span class="checkmark"></span>
                                    <span class="label-text">⏸️ Paused Mode</span>
                                </label>
                                <small style="color: var(--text-muted);">Do not send any messages during specified hours</small>
                            </div>
                            <div class="time-range" id="edit-paused-range" style="display: none;">
                                <div class="time-inputs">
                                    <div class="time-input">
                                        <label for="edit-paused_start_time">From:</label>
                                        <input type="time" id="edit-paused_start_time" name="paused_start_time">
                                    </div>
                                    <div class="time-input">
                                        <label for="edit-paused_end_time">To:</label>
                                        <input type="time" id="edit-paused_end_time" name="paused_end_time">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div id="edit-test-result"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-test" id="edit-test-btn">🧪 Test Bot</button>
                    <button type="button" class="btn btn-secondary modal-cancel">Cancel</button>
                    <button type="submit" class="btn">Update Bot</button>
                </div>
            </form>
        </div>
    </div>
    
    <script src="/js/theme-manager.js"></script>
    <script>
        // Modal functionality
        document.addEventListener('DOMContentLoaded', function() {
            const modals = document.querySelectorAll('.modal');
            const addBtn = document.querySelector('[data-modal="add-bot-modal"]');
            const closeBtns = document.querySelectorAll('.modal-close, .modal-cancel');
            
            // Setup scheduling checkbox handlers
            setupSchedulingHandlers();
            
            // Open modal
            if (addBtn) {
                addBtn.addEventListener('click', function() {
                    const modalId = this.getAttribute('data-modal');
                    const modal = document.getElementById(modalId);
                    if (modal) {
                        modal.classList.add('show');
                        // Clear form and test results
                        const form = modal.querySelector('form');
                        if (form) form.reset();
                        const testResult = modal.querySelector('[id$="-test-result"]');
                        if (testResult) testResult.innerHTML = '';
                    }
                });
            }
            
            // Close modal
            closeBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const modal = this.closest('.modal');
                    if (modal) {
                        modal.classList.remove('show');
                    }
                });
            });
            
            // Close modal on outside click
            modals.forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        this.classList.remove('show');
                    }
                });
            });
            
            // Test bot functionality
            function setupTestButton(testBtnId, formId, resultId) {
                const testBtn = document.getElementById(testBtnId);
                const form = document.getElementById(formId);
                const resultDiv = document.getElementById(resultId);
                
                if (!testBtn || !form || !resultDiv) return;
                
                testBtn.addEventListener('click', async function() {
                    const botToken = form.querySelector('[name="bot_token"]').value.trim();
                    const chatId = form.querySelector('[name="chat_id"]').value.trim();
                    
                    if (!botToken || !chatId) {
                        resultDiv.innerHTML = '<div class="test-result error">⚠️ Please fill in both Bot Token and Chat ID before testing.</div>';
                        return;
                    }
                    
                    // Disable button and show loading
                    testBtn.disabled = true;
                    testBtn.textContent = '🔄 Testing...';
                    resultDiv.innerHTML = '';
                    
                    try {
                        const response = await fetch('/bots/test', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                bot_token: botToken,
                                chat_id: chatId
                            })
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            resultDiv.innerHTML = `<div class="test-result success">✅ ${result.message}</div>`;
                        } else {
                            resultDiv.innerHTML = `<div class="test-result error">❌ ${result.error}</div>`;
                        }
                    } catch (error) {
                        resultDiv.innerHTML = `<div class="test-result error">❌ Network error: ${error.message}</div>`;
                    } finally {
                        // Re-enable button
                        testBtn.disabled = false;
                        testBtn.textContent = '🧪 Test Bot';
                    }
                });
            }
            
            // Setup test buttons
            setupTestButton('add-test-btn', 'add-bot-form', 'add-test-result');
            setupTestButton('edit-test-btn', 'edit-bot-form', 'edit-test-result');
        });
        
        // Scheduling functionality
        function setupSchedulingHandlers() {
            // Add modal handlers
            const addSilentCheckbox = document.getElementById('add-silent_enabled');
            const addSilentRange = document.getElementById('add-silent-range');
            const addPausedCheckbox = document.getElementById('add-paused_enabled');
            const addPausedRange = document.getElementById('add-paused-range');
            
            if (addSilentCheckbox && addSilentRange) {
                addSilentCheckbox.addEventListener('change', function() {
                    addSilentRange.style.display = this.checked ? 'block' : 'none';
                    if (!this.checked) {
                        document.getElementById('add-silent_start_time').value = '';
                        document.getElementById('add-silent_end_time').value = '';
                    }
                });
            }
            
            if (addPausedCheckbox && addPausedRange) {
                addPausedCheckbox.addEventListener('change', function() {
                    addPausedRange.style.display = this.checked ? 'block' : 'none';
                    if (!this.checked) {
                        document.getElementById('add-paused_start_time').value = '';
                        document.getElementById('add-paused_end_time').value = '';
                    }
                });
            }
            
            // Edit modal handlers
            const editSilentCheckbox = document.getElementById('edit-silent_enabled');
            const editSilentRange = document.getElementById('edit-silent-range');
            const editPausedCheckbox = document.getElementById('edit-paused_enabled');
            const editPausedRange = document.getElementById('edit-paused-range');
            
            if (editSilentCheckbox && editSilentRange) {
                editSilentCheckbox.addEventListener('change', function() {
                    editSilentRange.style.display = this.checked ? 'block' : 'none';
                    if (!this.checked) {
                        document.getElementById('edit-silent_start_time').value = '';
                        document.getElementById('edit-silent_end_time').value = '';
                    }
                });
            }
            
            if (editPausedCheckbox && editPausedRange) {
                editPausedCheckbox.addEventListener('change', function() {
                    editPausedRange.style.display = this.checked ? 'block' : 'none';
                    if (!this.checked) {
                        document.getElementById('edit-paused_start_time').value = '';
                        document.getElementById('edit-paused_end_time').value = '';
                    }
                });
            }
        }
        
        // Edit bot function
        async function editBot(botId) {
            try {
                const response = await fetch(`/bots/${botId}/edit`);
                const bot = await response.json();
                
                if (bot.error) {
                    alert('Error loading bot data: ' + bot.error);
                    return;
                }
                
                // Populate edit form
                document.getElementById('edit-bot_name').value = bot.bot_name || '';
                document.getElementById('edit-bot_token').value = bot.bot_token || '';
                document.getElementById('edit-chat_id').value = bot.chat_id || '';
                
                // Populate scheduling fields
                const silentEnabled = bot.silent_enabled === 1;
                const pausedEnabled = bot.paused_enabled === 1;
                
                document.getElementById('edit-silent_enabled').checked = silentEnabled;
                document.getElementById('edit-silent_start_time').value = bot.silent_start_time || '';
                document.getElementById('edit-silent_end_time').value = bot.silent_end_time || '';
                document.getElementById('edit-silent-range').style.display = silentEnabled ? 'block' : 'none';
                
                document.getElementById('edit-paused_enabled').checked = pausedEnabled;
                document.getElementById('edit-paused_start_time').value = bot.paused_start_time || '';
                document.getElementById('edit-paused_end_time').value = bot.paused_end_time || '';
                document.getElementById('edit-paused-range').style.display = pausedEnabled ? 'block' : 'none';
                
                // Set form action
                document.getElementById('edit-bot-form').action = `/bots/${botId}/edit`;
                
                // Clear test results
                document.getElementById('edit-test-result').innerHTML = '';
                
                // Show modal
                document.getElementById('edit-bot-modal').classList.add('show');
            } catch (error) {
                alert('Error loading bot data: ' + error.message);
            }
        }
        
        // Make editBot function globally available
        window.editBot = editBot;
    </script>
</body>
</html>
